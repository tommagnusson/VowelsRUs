package gov.vhs.tmagnusson.vowels;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.stream.Stream;

/**
 * The vowels on planet ACSL are naturally enough, the letters A, C, S, and L. 
 * All other letters are considered to be consonants. There are two tasks 
 * associated with each word:  forming the plural and adding a suffix.
 * 
 * <ul>
 * 	<li>The plural is formed with the {@code pluralize()} method.
 * 	<li>Adding the suffix is formed with the {@code suffixize()} method.
 * 	<li>{@code parse()} calls both the aforementioned methods and outputs the conjugations.
 * </ul>
 * 
 * The term "lettering" refers to whether a letter is a vowel or consonant.
 * 
 * @author Tommy
 *
 */
public class VowelsRUs {
	
	public static void main(String[] args) {
		// testData contains each line of the file specified
		//String[] testData = getTestDataFromFile("vowels.txt");
		String vowels = "XQAC ZVM\n"
						+ "PDAE AV\n"
						+ "SNIC SY\n"
						+ "AAAB BB\n"
						+ "BBBC DD\n"
						+ "ABAC CC\n"
						+ "ABAC DD\n"
						+ "James Gosling\n"
						+ "JAMES GOSLING\n"
						+ "Rubiks Cube\n"
						+ "RUBIKS CUBE\n"
						+ "BBBACSL ENDING\n"
						+ "AAABDEFGH ENDING\n";
		String[] testData = vowels.split("\n");
		
		// Performs the conjugation and outputs the results
		parse(testData);
	}

	// enum Section

	/**
	 * <p>A basic enum representing either a vowel or consonant.
	 * A vowel is the upper or lower case representation of: a,
	 * c, s, or l. All other String letter values are considered
	 * consonants.</p>
	 * <p>Note: within all comments Vowels are represented as {@code V}
	 * and Consonants are represented as {@code C}.</p>
	 * @author Tommy
	 *
	 */
	private enum Lettering {
		VOWEL, CONSONANT;
		
		/**
		 * <p>Looks at each letter in the String given and
		 * creates a corresponding Lettering array based
		 * on if it's either a vowel (a, c, s, l) or consonant.</p>
		 * <p> Note: {@code V} is a {@code Lettering.VOWEL} and
		 * {@code C} is a {@code Lettering.CONSONANT}</p>
		 * <p>
		 * <code>"Lack" -> ["L", "a", "c", "k"] -> [V, V, V, C]</code>
		 * <p>
		 * <code>"Cena" -> ["C", "e", "n", "a"] -> [V, C, C, V]</code>
		 * </p>
		 * @param s
		 * 			, a word to be mapped to letterings
		 * @return a "lettered" array of the word
		 */
		private static Lettering[] toLettering(String s) {
			// String -> String[] of letters -> mapped Lettering[]
			return Arrays.stream(s.split(""))
						 .map(Lettering::findLettering)
						 .toArray(Lettering[]::new);
		}
		
		/**
		 *  <p>Maps a given letter to either consonant or vowel.
		 *  The argument <b>must be a String with a length of 1</b>.
		 *  <p>
		 *  <code>
		 *  	"A" -> V<p>
		 *  	"K" -> C<p>
		 *  	"PS" -> IllegalArgumentException
		 *  </code>
		 */
		private static Lettering findLettering(String letter) {
			if (!(letter.length() == 1)) {
				throw new IllegalArgumentException(
						"findLettering() takes a single letter argument.");
			}
			Lettering l = Lettering.CONSONANT;
			switch (letter) {
			// Checking for vowels (upper and lower case)
			case "a": case "A":
			case "c": case "C":
			case "s": case "S":
			case "l": case "L":
				l = Lettering.VOWEL;
				break;
			// Default just leave l as a consonant
			default:
				break;
			}
			return l;
		}
		
		/**
		 * For debugging purposes this method is overridden to
		 * more succinctly express vowels and consonants,
		 * especially in Lettering arrays.
		 * <li>{@code "V"} is a {@code Lettering.VOWEL}
		 * <li>{@code "C"} is a {@code Lettering.CONSONANT}
		 */
		@Override
		public String toString() {
			return this.equals(Lettering.VOWEL) ? "V" : "C";
		}
	}
	
	/**
	 * Describes a lettering rule for the first word
	 * according to the chart on the assignment page.
	 * @author Tommy
	 *
	 */
	private enum Rule {
		ENDS_IN_SINGLE_CONSONANT, ENDS_IN_SINGLE_VOWEL, ENDS_IN_DOUBLE_CONSONANTS_OR_VOWELS;
		
		/**
		 * Finds a rule for a word based on the table on the assignment page.
		 * @param line
		 * @return A rule based on the table on the assignment page.
		 */
		private static Rule find(String line) {
			String word = line.split(" ")[0];
			Lettering[] letterings = Lettering.toLettering(word);
			
			// Need the last and penultimate letterings to check the rules
			Lettering last = letterings[letterings.length - 1];
			Lettering penultimate = letterings[letterings.length - 2];
			
			// Ends in double consonant
			if (last.equals(Lettering.CONSONANT)
					&& penultimate.equals(Lettering.CONSONANT)) {
				return Rule.ENDS_IN_DOUBLE_CONSONANTS_OR_VOWELS;
			}
			// Ends in double vowel
			if (last.equals(Lettering.VOWEL) && penultimate.equals(Lettering.VOWEL)) {
				return Rule.ENDS_IN_DOUBLE_CONSONANTS_OR_VOWELS;
			}
			// Ends in single consonant
			if (last.equals(Lettering.CONSONANT)) {
				return Rule.ENDS_IN_SINGLE_CONSONANT;
			}
			// Ends in single vowel
			if (last.equals(Lettering.VOWEL)) {
				return Rule.ENDS_IN_SINGLE_VOWEL;
			}
			// Unknown case, the method should have returned already
			throw new IllegalStateException("Unknown rule based on argument.");
		}
	}

	/**
	 * Describes a lettering rule for the prefix
	 * according to the chart on the assignment page.
	 * @author Tommy
	 *
	 */
	private enum SuffixRule {
		STARTS_WITH_CONSONANT, STARTS_WITH_VOWEL;
		
		private static SuffixRule find(String line) {
			// Should always be the second "word"
			String suffix = line.split(" ")[1];
			Lettering[] suffixLettering = Lettering.toLettering(suffix);
			// return the rule that corresponds with the first lettering in the suffix,
			// either starts with vowel or consonant.
			return suffixLettering[0].equals(Lettering.VOWEL) ? SuffixRule.STARTS_WITH_VOWEL
					: SuffixRule.STARTS_WITH_CONSONANT;
		}
	}

	// Core Static Methods Section

	/**
	 * A method that takes the lines of data, each line
	 * as a spot in an array, and finds and outputs
	 * both the suffix and plural of each line.
	 * @param lines
	 * 		, of the file you wish to parse for conjugation.
	 */
	private static void parse(String[] lines) {
		for (String line : lines) {
			
			// Finds the rule for the word and the suffix
			// based on the respective lettering of each.
			Rule rule = Rule.find(line);
			SuffixRule suffixRule = SuffixRule.find(line);
			
			// Find the plural and suffix
			String plural = pluralize(line, rule);
			String suffix = suffixize(line, rule, suffixRule);
			
			// Output the conjugated forms
			System.out.println("Original: " + line);
			System.out.println("Plural: " + plural);
			System.out.println("Suffix: " + suffix);
			System.out.println();
		}
	}
	
	/**
	 * Returns the plural of the line based on the rule argument.
	 * @param line
	 * @param rule
	 * @return the plural of the line based on the rule
	 */
	private static String pluralize(String line, Rule rule) {
		// Split and get word
		String word = line.split(" ")[0];
		switch (rule) {
		case ENDS_IN_SINGLE_CONSONANT:
			// Add "GH" to word
			word += "GH";
			return word;
		case ENDS_IN_SINGLE_VOWEL:
			// Drop the final vowel
			word = word.substring(0, word.length() - 1);
			// Add "G"
			word += "G";
			return word;
		case ENDS_IN_DOUBLE_CONSONANTS_OR_VOWELS:
			String lastLetter = word.substring(word.length() - 1, word.length());
			// Double the last letter and add "H"
			word += lastLetter + "H";
			return word;
		default:
			break;
		}
		// The default case should never happen, thus throw an exception:
		throw new IllegalStateException("Default case, unknown rule.");
	}
	
	/**
	 * Returns the correctly conjugated suffix form of the line
	 * entered based on the rules given in the arguments.
	 * @param line
	 * @param r
	 * 		, The rule for the word in {@code line}
	 * @param sr
	 * 		, The suffix rule for the suffix in {@code line}
	 * @return
	 * 		A String that is properly conjugated into suffix form
	 */
	private static String suffixize(String line, Rule rule, SuffixRule suffixRule) {
		// Find the word within the line
		String word = line.split(" ")[0];
		// Find the suffix within the line
		String suffix = line.split(" ")[1];
		
		// firstLetter is needed for more than one specific case
		// thus it is declared in a scope that encompasses
		// the switch statement.
		String firstLetter = suffix.substring(0, 1);
		
		// Finding to which rule the line adheres
		// with a switch statement
		switch(rule) {
		case ENDS_IN_SINGLE_CONSONANT:
			// Add the suffix for both cases
			return word + suffix;
		case ENDS_IN_SINGLE_VOWEL:
			if (suffixRule.equals(SuffixRule.STARTS_WITH_CONSONANT)) {
				// Word ends in single vowel and suffix starts with consonant.
				// Add first letter of suffix and add suffix.
				return word + firstLetter + suffix;
			} else {
				// Word ends in single vowel and suffix starts with vowel.
				// Drop first letter of suffix then add suffix (clever variable name).
				String uffix = suffix.substring(1, suffix.length());
				return word + uffix;
			}
		case ENDS_IN_DOUBLE_CONSONANTS_OR_VOWELS:
			if (suffixRule.equals(SuffixRule.STARTS_WITH_CONSONANT)) {
				// Word ends in double C or V and suffix starts with C.
				// Drop leftmost letter of final sequence, then add suffix.
				int i = findLeftmostLetteringIndex(word);
				word = word.substring(0, i) + word.substring(i + 1, word.length());
				return word + suffix;
			} else {
				//Word ends in double C or V and suffix starts with V.
				// Add first letter of suffix then add suffix.
				return word + firstLetter + suffix;
			}
		default:
			break;
		}
		// The default case should never happen, thus throw an exception:
		throw new IllegalStateException("Default case, unknown rule.");
	}

	/**
	 * Finds the leftmost lettering from the end of word.
	 * <p>
	 * <code>
	 * 	"precalc" -> [C, C, C, <i><b>V</b></i>, V, V, V] -> 3
	 * </code>
	 * @param word
	 * @return the index of the leftmost consecutive lettering 
	 * 		   starting from the right
	 */
	private static int findLeftmostLetteringIndex(String word) {
		Lettering[] letterings = Lettering.toLettering(word);
		Lettering lastLettering = letterings[letterings.length - 1];
		
		// Iterates from rightmost lettering in the word to the left
		for (int i = letterings.length - 1; i >= 0; i--) {
			if (!letterings[i].equals(lastLettering)) {
				// Found a lettering that is different from the previous.
				// Return the previous index.
				return i + 1;
			}
		}
		// String is all C or all V thus the
		// leftmost letter is the first one (index 0).
		return 0;
	}

	// IO METHOD
	
	/**
	 * Converts the file's lines into an array of Strings. Uses the Classloader
	 * to find the specified file.
	 * 
	 * @param fileName
	 * @return an String[] of the lines of the file.
	 * @throws FileNotFoundException
	 * @throws URISyntaxException
	 */
	private static String[] getTestDataFromFile(String fileName)
			throws FileNotFoundException, URISyntaxException {
		// String -> URL (from the ClassLoader)
		URL url = VowelsRUs.class.getClassLoader().getResource(fileName);
		// URL -> File (to get the correct path name)
		File f = Paths.get(url.toURI()).toFile();

		// Create a stream of the lines of the file
		Stream<String> stream = new BufferedReader(new FileReader(f)).lines();
		// Return a String[], each index contains a line of the file
		return stream.toArray(String[]::new);
	}
	
}